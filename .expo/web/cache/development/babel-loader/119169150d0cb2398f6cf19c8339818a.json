{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _AnimatedText = _interopRequireDefault(require(\"./Typography/AnimatedText\"));\n\nvar _theming = require(\"../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/HelperText.tsx\";\n\nvar HelperText = function (_React$PureComponent) {\n  (0, _inherits2.default)(HelperText, _React$PureComponent);\n\n  function HelperText() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, HelperText);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(HelperText)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"state\", {\n      shown: new _reactNative.Animated.Value(_this.props.visible ? 1 : 0),\n      textHeight: 0\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"showText\", function () {\n      var scale = _this.props.theme.animation.scale;\n\n      _reactNative.Animated.timing(_this.state.shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"hideText\", function () {\n      var scale = _this.props.theme.animation.scale;\n\n      _reactNative.Animated.timing(_this.state.shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true\n      }).start();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleTextLayout\", function (e) {\n      _this.props.onLayout && _this.props.onLayout(e);\n\n      _this.setState({\n        textHeight: e.nativeEvent.layout.height\n      });\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(HelperText, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.visible !== this.props.visible || prevState.textHeight !== this.state.textHeight) {\n        if (this.props.visible) {\n          this.showText();\n        } else {\n          this.hideText();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          type = _this$props.type,\n          visible = _this$props.visible,\n          theme = _this$props.theme,\n          onLayout = _this$props.onLayout,\n          padding = _this$props.padding,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"style\", \"type\", \"visible\", \"theme\", \"onLayout\", \"padding\"]);\n      var colors = theme.colors,\n          dark = theme.dark;\n      var textColor = this.props.type === 'error' ? colors.error : (0, _color.default)(colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();\n      return React.createElement(_AnimatedText.default, (0, _extends2.default)({\n        onLayout: this.handleTextLayout,\n        style: [styles.text, padding !== 'none' ? styles.padding : {}, {\n          color: textColor,\n          opacity: this.state.shown,\n          transform: visible && type === 'error' ? [{\n            translateY: this.state.shown.interpolate({\n              inputRange: [0, 1],\n              outputRange: [-this.state.textHeight / 2, 0]\n            })\n          }] : []\n        }, style]\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        }\n      }), this.props.children);\n    }\n  }]);\n  return HelperText;\n}(React.PureComponent);\n\n(0, _defineProperty2.default)(HelperText, \"defaultProps\", {\n  type: 'info',\n  padding: 'normal',\n  visible: true\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4\n  },\n  padding: {\n    paddingHorizontal: 12\n  }\n});\n\nvar _default = (0, _theming.withTheme)(HelperText);\n\nexports.default = _default;","map":{"version":3,"sources":["HelperText.tsx"],"names":["HelperText","React","PureComponent","type","padding","visible","shown","Animated","textHeight","prevProps","prevState","scale","toValue","duration","useNativeDriver","e","style","theme","onLayout","rest","colors","dark","textColor","styles","color","opacity","transform","translateY","inputRange","outputRange","StyleSheet","text","fontSize","paddingVertical","paddingHorizontal"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport { Theme, $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentProps<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\ntype State = {\n  shown: Animated.Value;\n  textHeight: number;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     text: ''\n *   };\n *\n *   _onChangeText = text => this.setState({ text });\n *\n *   _hasErrors = () => {\n *     return !this.state.text.includes('@');\n *   }\n *\n *   render(){\n *     const { text } = this.state;\n *\n *     return (\n *       <View>\n *         <TextInput\n *           label=\"Email\"\n *           value={text}\n *           onChangeText={this._onChangeText}\n *         />\n *         <HelperText\n *           type=\"error\"\n *           visible={this._hasErrors()}\n *         >\n *           Email address is invalid!\n *         </HelperText>\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\nclass HelperText extends React.PureComponent<Props, State> {\n  static defaultProps: Partial<Props> = {\n    type: 'info',\n    padding: 'normal',\n    visible: true,\n  };\n\n  state = {\n    shown: new Animated.Value(this.props.visible ? 1 : 0),\n    textHeight: 0,\n  };\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (\n      prevProps.visible !== this.props.visible ||\n      prevState.textHeight !== this.state.textHeight\n    ) {\n      if (this.props.visible) {\n        this.showText();\n      } else {\n        this.hideText();\n      }\n    }\n  }\n\n  private showText = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.shown, {\n      toValue: 1,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private hideText = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.shown, {\n      toValue: 0,\n      duration: 180 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private handleTextLayout = (e: LayoutChangeEvent) => {\n    //@ts-ignore Animated.Text typings are improved but something is still broken. It thinks onLayout is not callable.\n    this.props.onLayout && this.props.onLayout(e);\n    this.setState({\n      textHeight: e.nativeEvent.layout.height,\n    });\n  };\n\n  render() {\n    const {\n      style,\n      type,\n      visible,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onLayout,\n      padding,\n      ...rest\n    } = this.props;\n    const { colors, dark } = theme;\n\n    const textColor =\n      this.props.type === 'error'\n        ? colors.error\n        : color(colors.text)\n            .alpha(dark ? 0.7 : 0.54)\n            .rgb()\n            .string();\n\n    return (\n      <AnimatedText\n        onLayout={this.handleTextLayout}\n        style={[\n          styles.text,\n          padding !== 'none' ? styles.padding : {},\n          {\n            color: textColor,\n            opacity: this.state.shown,\n            transform:\n              visible && type === 'error'\n                ? [\n                    {\n                      translateY: this.state.shown.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [-this.state.textHeight / 2, 0],\n                      }),\n                    },\n                  ]\n                : [],\n          },\n          style,\n        ]}\n        {...rest}\n      >\n        {this.props.children}\n      </AnimatedText>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]},"metadata":{},"sourceType":"script"}