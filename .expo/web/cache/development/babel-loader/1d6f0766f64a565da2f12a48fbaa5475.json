{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _ToggleButton = _interopRequireDefault(require(\"./ToggleButton\"));\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/ToggleButton/ToggleButtonRow.tsx\";\n\nvar ToggleButtonRow = function (_React$Component) {\n  (0, _inherits2.default)(ToggleButtonRow, _React$Component);\n\n  function ToggleButtonRow() {\n    (0, _classCallCheck2.default)(this, ToggleButtonRow);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ToggleButtonRow).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(ToggleButtonRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          onValueChange = _this$props.onValueChange,\n          children = _this$props.children,\n          style = _this$props.style;\n      var count = React.Children.count(children);\n      return React.createElement(_ToggleButton.default.Group, {\n        value: value,\n        onValueChange: onValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        }\n      }, React.createElement(_reactNative.View, {\n        style: [styles.row, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        }\n      }, React.Children.map(children, function (child, i) {\n        if (child && child.type === _ToggleButton.default) {\n          return React.cloneElement(child, {\n            style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, child.props.style]\n          });\n        }\n\n        return child;\n      })));\n    }\n  }]);\n  return ToggleButtonRow;\n}(React.Component);\n\n(0, _defineProperty2.default)(ToggleButtonRow, \"displayName\", 'ToggleButton.Row');\n\nvar styles = _reactNative.StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderWidth: _reactNative.StyleSheet.hairlineWidth\n  },\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }\n});\n\nvar _default = ToggleButtonRow;\nexports.default = _default;","map":{"version":3,"sources":["ToggleButtonRow.tsx"],"names":["ToggleButtonRow","React","Component","value","onValueChange","children","style","count","styles","child","ToggleButton","i","StyleSheet","row","flexDirection","button","borderWidth","first","borderTopRightRadius","borderBottomRightRadius","middle","borderRadius","borderLeftWidth","last","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAEA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,kBAAA,CAAA;;;;AA8CMA,IAAAA,e;;;;;;;;;;6BAGK;AAAA,UAAA,WAAA,GAC2C,KAD3C,KAAA;AAAA,UACCG,KADD,GAAA,WAAA,CAAA,KAAA;AAAA,UACQC,aADR,GAAA,WAAA,CAAA,aAAA;AAAA,UACuBC,QADvB,GAAA,WAAA,CAAA,QAAA;AAAA,UACiCC,KADjC,GAAA,WAAA,CAAA,KAAA;AAEP,UAAMC,KAAK,GAAGN,KAAK,CAALA,QAAAA,CAAAA,KAAAA,CAAd,QAAcA,CAAd;AAEA,aACE,KAAA,CAAA,aAAA,CAAC,aAAA,CAAD,OAAC,CAAD,KAAA,EAAA;AAAoB,QAAA,KAAK,EAAzB,KAAA;AAAkC,QAAA,aAAa,EAA/C,aAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAM,QAAA,KAAK,EAAE,CAACO,MAAM,CAAP,GAAA,EAAb,KAAa,CAAb;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EACGP,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAA6B,UAAA,KAAA,EAAA,CAAA,EAAc;AAE1C,YAAIQ,KAAK,IAAIA,KAAK,CAALA,IAAAA,KAAeC,aAAAA,CAA5B,OAAA,EAA0C;AAExC,iBAAOT,KAAK,CAALA,YAAAA,CAAAA,KAAAA,EAA0B;AAC/BK,YAAAA,KAAK,EAAE,CACLE,MAAM,CADD,MAAA,EAELG,CAAC,KAADA,CAAAA,GACIH,MAAM,CADVG,KAAAA,GAEIA,CAAC,KAAKJ,KAAK,GAAXI,CAAAA,GACAH,MAAM,CADNG,IAAAA,GAEAH,MAAM,CANL,MAAA,EAQLC,KAAK,CAALA,KAAAA,CATJ,KACS;AADwB,WAA1BR,CAAP;AAcF;;AAAA,eAAA,KAAA;AArBR,OAGOA,CADH,CADF,CADF;;;;EAP0BA,KAAK,CAACC,S,CAA9BF;;8BAAAA,e,iBACiB,kB;;AAmCvB,IAAMQ,MAAM,GAAGI,YAAAA,CAAAA,UAAAA,CAAAA,MAAAA,CAAkB;AAC/BC,EAAAA,GAAG,EAAE;AACHC,IAAAA,aAAa,EAFgB;AAC1B,GAD0B;AAI/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,WAAW,EAAEJ,YAAAA,CAAAA,UAAAA,CALgB;AAIvB,GAJuB;AAQ/BK,EAAAA,KAAK,EAAE;AACLC,IAAAA,oBAAoB,EADf,CAAA;AAELC,IAAAA,uBAAuB,EAVM;AAQxB,GARwB;AAa/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,YAAY,EADN,CAAA;AAENC,IAAAA,eAAe,EAfc;AAavB,GAbuB;AAkB/BC,EAAAA,IAAI,EAAE;AACJD,IAAAA,eAAe,EADX,CAAA;AAEJE,IAAAA,mBAAmB,EAFf,CAAA;AAGJC,IAAAA,sBAAsB,EArB1B;AAkBQ;AAlByB,CAAlBb,CAAf;;eAyBeZ,e","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { ToggleButton } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     value: 'left',\n *   };\n *\n *   render() {\n *     return(\n *       <ToggleButton.Row\n *         onValueChange={value => this.setState({ value })}\n *         value={this.state.value}\n *       >\n *           <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *           <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *       </ToggleButton.Row>\n *     )\n *   }\n * }\n *```\n */\nclass ToggleButtonRow extends React.Component<Props> {\n  static displayName = 'ToggleButton.Row';\n\n  render() {\n    const { value, onValueChange, children, style } = this.props;\n    const count = React.Children.count(children);\n\n    return (\n      <ToggleButton.Group value={value} onValueChange={onValueChange}>\n        <View style={[styles.row, style]}>\n          {React.Children.map(children, (child, i) => {\n            // @ts-ignore\n            if (child && child.type === ToggleButton) {\n              // @ts-ignore\n              return React.cloneElement(child, {\n                style: [\n                  styles.button,\n                  i === 0\n                    ? styles.first\n                    : i === count - 1\n                    ? styles.last\n                    : styles.middle,\n                  // @ts-ignore\n                  child.props.style,\n                ],\n              });\n            }\n\n            return child;\n          })}\n        </View>\n      </ToggleButton.Group>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n"]},"metadata":{},"sourceType":"script"}