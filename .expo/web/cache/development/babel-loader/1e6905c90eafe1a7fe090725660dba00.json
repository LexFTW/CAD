{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Text = _interopRequireDefault(require(\"./Text\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Typography/StyledText.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar StyledText = function (_React$Component) {\n  (0, _inherits2.default)(StyledText, _React$Component);\n\n  function StyledText() {\n    (0, _classCallCheck2.default)(this, StyledText);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(StyledText).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(StyledText, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          alpha = _this$props.alpha,\n          family = _this$props.family,\n          style = _this$props.style,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"theme\", \"alpha\", \"family\", \"style\"]);\n      var textColor = (0, _color.default)(theme.colors.text).alpha(alpha).rgb().string();\n      var font = theme.fonts[family];\n      var writingDirection = _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr';\n      return React.createElement(_Text.default, (0, _extends2.default)({}, rest, {\n        style: [_objectSpread({\n          color: textColor\n        }, font, {\n          textAlign: 'left',\n          writingDirection: writingDirection\n        }), style, this.props.style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        }\n      }));\n    }\n  }]);\n  return StyledText;\n}(React.Component);\n\nvar _default = (0, _theming.withTheme)(StyledText);\n\nexports.default = _default;","map":{"version":3,"sources":["StyledText.tsx"],"names":["StyledText","React","Component","theme","alpha","family","style","rest","textColor","font","writingDirection","I18nManager","color","textAlign"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAGA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,UAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,sBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUMA;;AAAAA,IAAAA,U;;;;;;;;;;6BACK;AAAA,UAAA,WAAA,GAC0C,KAD1C,KAAA;AAAA,UACCG,KADD,GAAA,WAAA,CAAA,KAAA;AAAA,UACQC,KADR,GAAA,WAAA,CAAA,KAAA;AAAA,UACeC,MADf,GAAA,WAAA,CAAA,MAAA;AAAA,UACuBC,KADvB,GAAA,WAAA,CAAA,KAAA;AAAA,UACiCC,IADjC,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,WAAA,EAAA,CAAA,OAAA,EAAA,OAAA,EAAA,QAAA,EAAA,OAAA,CAAA,CAAA;AAEP,UAAMC,SAAS,GAAG,CAAA,GAAA,MAAA,CAAA,OAAA,EAAML,KAAK,CAALA,MAAAA,CAAN,IAAA,EAAA,KAAA,CAAA,KAAA,EAAA,GAAA,GAAlB,MAAkB,EAAlB;AAIA,UAAMM,IAAI,GAAGN,KAAK,CAALA,KAAAA,CAAb,MAAaA,CAAb;AACA,UAAMO,gBAAgB,GAAGC,YAAAA,CAAAA,WAAAA,CAAAA,KAAAA,GAAAA,KAAAA,GAAzB,KAAA;AAEA,aACE,KAAA,CAAA,aAAA,CAAC,KAAA,CAAD,OAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,IAAA,EAAA;AAEE,QAAA,KAAK,EAAE,CAAA,aAAA,CAAA;AACHC,UAAAA,KAAK,EADF;AAAA,SAAA,EAAA,IAAA,EAAA;AACwBC,UAAAA,SAAS,EADjC,MAAA;AAC2CH,UAAAA,gBAAgB,EAD3D;AAAA,SAAA,CAAA,EAAA,KAAA,EAGL,KAAA,KAAA,CALJ,KAES,CAFT;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EADF;AACE;AAAA,OAAA,CAAA,CADF;;;;EAVqBT,KAAK,CAACC,S,CAAzBF;;eAuBS,CAAA,GAAA,QAAA,CAAA,SAAA,EAAA,UAAA,C","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { I18nManager, StyleProp, TextStyle } from 'react-native';\n\nimport Text from './Text';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  alpha: number;\n  family: 'regular' | 'medium' | 'light' | 'thin';\n  style?: StyleProp<TextStyle>;\n  theme: Theme;\n};\n\nclass StyledText extends React.Component<Props> {\n  render() {\n    const { theme, alpha, family, style, ...rest } = this.props;\n    const textColor = color(theme.colors.text)\n      .alpha(alpha)\n      .rgb()\n      .string();\n    const font = theme.fonts[family];\n    const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n    return (\n      <Text\n        {...rest}\n        style={[\n          { color: textColor, ...font, textAlign: 'left', writingDirection },\n          style,\n          this.props.style,\n        ]}\n      />\n    );\n  }\n}\n\nexport default withTheme(StyledText);\n"]},"metadata":{},"sourceType":"script"}