{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RadioButtonItem = exports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _RadioButtonGroup = require(\"./RadioButtonGroup\");\n\nvar _utils = require(\"./utils\");\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple\"));\n\nvar _RadioButton = _interopRequireDefault(require(\"./RadioButton\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/RadioButton/RadioButtonItem.tsx\";\n\nvar RadioButtonItem = function (_React$Component) {\n  (0, _inherits2.default)(RadioButtonItem, _React$Component);\n\n  function RadioButtonItem() {\n    (0, _classCallCheck2.default)(this, RadioButtonItem);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RadioButtonItem).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(RadioButtonItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          label = _this$props.label,\n          style = _this$props.style,\n          labelStyle = _this$props.labelStyle,\n          _onPress = _this$props.onPress,\n          status = _this$props.status,\n          colors = _this$props.theme.colors;\n      return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        }\n      }, function (context) {\n        return React.createElement(_TouchableRipple.default, {\n          onPress: function onPress() {\n            return (0, _utils.handlePress)({\n              onPress: _onPress,\n              onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n              value: value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          }\n        }, React.createElement(_reactNative.View, {\n          style: [styles.container, style],\n          pointerEvents: \"none\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          }\n        }, React.createElement(_Text.default, {\n          style: [styles.label, labelStyle, {\n            color: colors.primary\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          }\n        }, label), React.createElement(_RadioButton.default, {\n          value: value,\n          status: status,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          }\n        })));\n      });\n    }\n  }]);\n  return RadioButtonItem;\n}(React.Component);\n\nexports.RadioButtonItem = RadioButtonItem;\n(0, _defineProperty2.default)(RadioButtonItem, \"displayName\", 'RadioButton.Item');\n\nvar _default = (0, _theming.withTheme)(RadioButtonItem);\n\nexports.default = _default;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["RadioButtonItem.tsx"],"names":["RadioButtonItem","React","Component","value","label","style","labelStyle","onPress","status","colors","onValueChange","context","styles","color","StyleSheet","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { Theme } from '../../types';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { RadioButton, Text } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     value: 'first',\n *   };\n *\n *   render() {\n *     return(\n *       <RadioButton.Group\n *         onValueChange={value => this.setState({ value })}\n *         value={this.state.value}\n *       >\n *           <RadioButton.Item label=\"First item\" value=\"first\" />\n *           <RadioButton.Item label=\"Second item\" value=\"second\" />\n *       </RadioButton.Group>\n *     )\n *   }\n * }\n *```\n */\nclass RadioButtonItem extends React.Component<Props> {\n  static displayName = 'RadioButton.Item';\n\n  render() {\n    const {\n      value,\n      label,\n      style,\n      labelStyle,\n      onPress,\n      status,\n      theme: { colors },\n    } = this.props;\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          return (\n            <TouchableRipple\n              onPress={() =>\n                handlePress({\n                  onPress: onPress,\n                  onValueChange: context?.onValueChange,\n                  value,\n                })\n              }\n            >\n              <View style={[styles.container, style]} pointerEvents=\"none\">\n                <Text\n                  style={[styles.label, labelStyle, { color: colors.primary }]}\n                >\n                  {label}\n                </Text>\n                <RadioButton value={value} status={status}></RadioButton>\n              </View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nexport { RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}