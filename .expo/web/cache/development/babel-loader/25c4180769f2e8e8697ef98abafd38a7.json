{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MenuItem = exports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _colors = require(\"../../styles/colors\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Menu/MenuItem.tsx\";\n\nvar MenuItem = function (_React$Component) {\n  (0, _inherits2.default)(MenuItem, _React$Component);\n\n  function MenuItem() {\n    (0, _classCallCheck2.default)(this, MenuItem);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MenuItem).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(MenuItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          title = _this$props.title,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          testID = _this$props.testID,\n          titleStyle = _this$props.titleStyle;\n      var disabledColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();\n      var titleColor = disabled ? disabledColor : (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();\n      var iconColor = disabled ? disabledColor : (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();\n      return React.createElement(_TouchableRipple.default, {\n        style: [styles.container, style],\n        onPress: onPress,\n        disabled: disabled,\n        testID: testID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        }\n      }, React.createElement(_reactNative.View, {\n        style: styles.row,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        }\n      }, icon ? React.createElement(_reactNative.View, {\n        style: [styles.item, styles.icon],\n        pointerEvents: \"box-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        }\n      }, React.createElement(_Icon.default, {\n        source: icon,\n        size: 24,\n        color: iconColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        }\n      })) : null, React.createElement(_reactNative.View, {\n        style: [styles.item, styles.content, icon ? styles.widthWithIcon : null],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        }\n      }, React.createElement(_Text.default, {\n        numberOfLines: 1,\n        style: [styles.title, {\n          color: titleColor\n        }, titleStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        }\n      }, title))));\n    }\n  }]);\n  return MenuItem;\n}(React.Component);\n\nexports.MenuItem = MenuItem;\n(0, _defineProperty2.default)(MenuItem, \"displayName\", 'Menu.Item');\nvar minWidth = 112;\nvar maxWidth = 280;\nvar iconWidth = 40;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    padding: 8,\n    minWidth: minWidth,\n    maxWidth: maxWidth\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  icon: {\n    width: iconWidth\n  },\n  title: {\n    fontSize: 16\n  },\n  item: {\n    margin: 8\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48)\n  }\n});\n\nvar _default = (0, _theming.withTheme)(MenuItem);\n\nexports.default = _default;","map":{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","React","Component","icon","title","disabled","onPress","theme","style","testID","titleStyle","disabledColor","white","black","titleColor","iconColor","styles","color","minWidth","maxWidth","iconWidth","StyleSheet","container","padding","row","flexDirection","width","fontSize","item","margin","content","justifyContent","widthWithIcon"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  TextStyle,\n  ViewStyle,\n  StyleProp,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n */\n\nclass MenuItem extends React.Component<Props> {\n  static displayName = 'Menu.Item';\n\n  render() {\n    const {\n      icon,\n      title,\n      disabled,\n      onPress,\n      theme,\n      style,\n      testID,\n      titleStyle,\n    } = this.props;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    const titleColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n\n    const iconColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n\n    return (\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n        testID={testID}\n      >\n        <View style={styles.row}>\n          {icon ? (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              <Icon source={icon} size={24} color={iconColor} />\n            </View>\n          ) : null}\n          <View\n            style={[\n              styles.item,\n              styles.content,\n              icon ? styles.widthWithIcon : null,\n            ]}\n            pointerEvents=\"none\"\n          >\n            <Text\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n          </View>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n    minWidth,\n    maxWidth,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    margin: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"]},"metadata":{},"sourceType":"script"}