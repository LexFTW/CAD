{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _colors = require(\"../styles/colors\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _theming = require(\"../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Switch.tsx\";\nvar version = _reactNative.NativeModules.PlatformConstants ? _reactNative.NativeModules.PlatformConstants.reactNativeVersion : undefined;\n\nvar Switch = function (_React$Component) {\n  (0, _inherits2.default)(Switch, _React$Component);\n\n  function Switch() {\n    (0, _classCallCheck2.default)(this, Switch);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Switch).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(Switch, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          disabled = _this$props.disabled,\n          onValueChange = _this$props.onValueChange,\n          color = _this$props.color,\n          theme = _this$props.theme,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"value\", \"disabled\", \"onValueChange\", \"color\", \"theme\"]);\n      var checkedColor = color || theme.colors.accent;\n      var onTintColor = _reactNative.Platform.OS === 'ios' ? checkedColor : disabled ? theme.dark ? (0, _color.default)(_colors.white).alpha(0.1).rgb().string() : (0, _color.default)(_colors.black).alpha(0.12).rgb().string() : (0, _color.default)(checkedColor).alpha(0.5).rgb().string();\n      var thumbTintColor = _reactNative.Platform.OS === 'ios' ? undefined : disabled ? theme.dark ? _colors.grey800 : _colors.grey400 : value ? checkedColor : theme.dark ? _colors.grey400 : _colors.grey50;\n      var props = version && version.major === 0 && version.minor <= 56 ? {\n        onTintColor: onTintColor,\n        thumbTintColor: thumbTintColor\n      } : {\n        thumbColor: thumbTintColor,\n        trackColor: {\n          true: onTintColor,\n          false: ''\n        }\n      };\n      return React.createElement(_reactNative.Switch, (0, _extends2.default)({\n        value: value,\n        disabled: disabled,\n        onValueChange: disabled ? undefined : onValueChange\n      }, props, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        }\n      }));\n    }\n  }]);\n  return Switch;\n}(React.Component);\n\nvar _default = (0, _theming.withTheme)(Switch);\n\nexports.default = _default;","map":{"version":3,"sources":["Switch.tsx"],"names":["version","NativeModules","Switch","React","Component","value","disabled","onValueChange","color","theme","rest","checkedColor","onTintColor","Platform","white","black","thumbTintColor","grey800","grey400","grey50","props","thumbColor","trackColor","true","false"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\ntype Props = React.ComponentProps<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     isSwitchOn: false,\n *   };\n *\n *   _onToggleSwitch = () => this.setState(state => ({ isSwitchOn: !state.isSwitchOn }));\n *\n *   render() {\n *     const { isSwitchOn } = this.state;\n *     return (\n *       <Switch\n *         value={isSwitchOn}\n *         onValueChange={this._onToggleSwitch}\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass Switch extends React.Component<Props> {\n  render() {\n    const {\n      value,\n      disabled,\n      onValueChange,\n      color,\n      theme,\n      ...rest\n    } = this.props;\n\n    const checkedColor = color || theme.colors.accent;\n\n    const onTintColor =\n      Platform.OS === 'ios'\n        ? checkedColor\n        : disabled\n        ? theme.dark\n          ? setColor(white)\n              .alpha(0.1)\n              .rgb()\n              .string()\n          : setColor(black)\n              .alpha(0.12)\n              .rgb()\n              .string()\n        : setColor(checkedColor)\n            .alpha(0.5)\n            .rgb()\n            .string();\n\n    const thumbTintColor =\n      Platform.OS === 'ios'\n        ? undefined\n        : disabled\n        ? theme.dark\n          ? grey800\n          : grey400\n        : value\n        ? checkedColor\n        : theme.dark\n        ? grey400\n        : grey50;\n\n    const props =\n      version && version.major === 0 && version.minor <= 56\n        ? {\n            onTintColor,\n            thumbTintColor,\n          }\n        : {\n            thumbColor: thumbTintColor,\n            trackColor: {\n              true: onTintColor,\n              false: '',\n            },\n          };\n\n    return (\n      <NativeSwitch\n        value={value}\n        disabled={disabled}\n        onValueChange={disabled ? undefined : onValueChange}\n        {...props}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport default withTheme(Switch);\n"]},"metadata":{},"sourceType":"script"}