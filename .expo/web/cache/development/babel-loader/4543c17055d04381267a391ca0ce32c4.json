{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _CardContent = _interopRequireDefault(require(\"./CardContent\"));\n\nvar _CardActions = _interopRequireDefault(require(\"./CardActions\"));\n\nvar _CardCover2 = _interopRequireDefault(require(\"./CardCover\"));\n\nvar _CardTitle2 = _interopRequireDefault(require(\"./CardTitle\"));\n\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Card/Card.tsx\";\n\nvar Card = function (_React$Component) {\n  (0, _inherits2.default)(Card, _React$Component);\n\n  function Card() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Card);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Card)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"state\", {\n      elevation: new _reactNative.Animated.Value(_this.props.elevation)\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handlePressIn\", function () {\n      var scale = _this.props.theme.animation.scale;\n\n      _reactNative.Animated.timing(_this.state.elevation, {\n        toValue: 8,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handlePressOut\", function () {\n      var scale = _this.props.theme.animation.scale;\n\n      _reactNative.Animated.timing(_this.state.elevation, {\n        toValue: _this.props.elevation,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          cardElevation = _this$props.elevation,\n          onLongPress = _this$props.onLongPress,\n          onPress = _this$props.onPress,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          testID = _this$props.testID,\n          accessible = _this$props.accessible,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"children\", \"elevation\", \"onLongPress\", \"onPress\", \"style\", \"theme\", \"testID\", \"accessible\"]);\n      var elevation = this.state.elevation;\n      var roundness = theme.roundness;\n      var total = React.Children.count(children);\n      var siblings = React.Children.map(children, function (child) {\n        return React.isValidElement(child) && child.type ? child.type.displayName : null;\n      });\n      return React.createElement(_Surface.default, (0, _extends2.default)({\n        style: [{\n          borderRadius: roundness,\n          elevation: elevation\n        }, style]\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        }\n      }), React.createElement(_reactNative.TouchableWithoutFeedback, {\n        delayPressIn: 0,\n        disabled: !(onPress || onLongPress),\n        onLongPress: onLongPress,\n        onPress: onPress,\n        onPressIn: onPress ? this.handlePressIn : undefined,\n        onPressOut: onPress ? this.handlePressOut : undefined,\n        testID: testID,\n        accessible: accessible,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        }\n      }, React.createElement(_reactNative.View, {\n        style: styles.innerContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        }\n      }, React.Children.map(children, function (child, index) {\n        return React.isValidElement(child) ? React.cloneElement(child, {\n          index: index,\n          total: total,\n          siblings: siblings\n        }) : child;\n      }))));\n    }\n  }]);\n  return Card;\n}(React.Component);\n\n(0, _defineProperty2.default)(Card, \"Content\", _CardContent.default);\n(0, _defineProperty2.default)(Card, \"Actions\", _CardActions.default);\n(0, _defineProperty2.default)(Card, \"Cover\", _CardCover2.default);\n(0, _defineProperty2.default)(Card, \"Title\", _CardTitle2.default);\n(0, _defineProperty2.default)(Card, \"defaultProps\", {\n  elevation: 1\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Card);\n\nexports.default = _default;","map":{"version":3,"sources":["Card.tsx"],"names":["Card","React","Component","CardContent","CardActions","CardCover","CardTitle","elevation","Animated","scale","toValue","duration","useNativeDriver","children","cardElevation","onLongPress","onPress","style","theme","testID","accessible","rest","roundness","total","siblings","child","borderRadius","styles","index","StyleSheet","innerContainer","flexGrow","flexShrink"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Card extends React.Component<Props, State> {\n  // @component ./CardContent.tsx\n  static Content = CardContent;\n  // @component ./CardActions.tsx\n  static Actions = CardActions;\n  // @component ./CardCover.tsx\n  static Cover = CardCover;\n  // @component ./CardTitle.tsx\n  static Title = CardTitle;\n\n  static defaultProps = {\n    elevation: 1,\n  };\n\n  state = {\n    // @ts-ignore\n    elevation: new Animated.Value(this.props.elevation),\n  };\n\n  private handlePressIn = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  private handlePressOut = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      // @ts-ignore\n      toValue: this.props.elevation,\n      duration: 150 * scale,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  render() {\n    const {\n      children,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      elevation: cardElevation,\n      onLongPress,\n      onPress,\n      style,\n      theme,\n      testID,\n      accessible,\n      ...rest\n    } = this.props;\n    const { elevation } = this.state;\n    const { roundness } = theme;\n    const total = React.Children.count(children);\n    const siblings = React.Children.map(children, child =>\n      React.isValidElement(child) && child.type\n        ? (child.type as any).displayName\n        : null\n    );\n    return (\n      <Surface\n        style={[{ borderRadius: roundness, elevation }, style]}\n        {...rest}\n      >\n        <TouchableWithoutFeedback\n          delayPressIn={0}\n          disabled={!(onPress || onLongPress)}\n          onLongPress={onLongPress}\n          onPress={onPress}\n          onPressIn={onPress ? this.handlePressIn : undefined}\n          onPressOut={onPress ? this.handlePressOut : undefined}\n          testID={testID}\n          accessible={accessible}\n        >\n          <View style={styles.innerContainer}>\n            {React.Children.map(children, (child, index) =>\n              React.isValidElement(child)\n                ? React.cloneElement(child, {\n                    index,\n                    total,\n                    siblings,\n                  })\n                : child\n            )}\n          </View>\n        </TouchableWithoutFeedback>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"script"}