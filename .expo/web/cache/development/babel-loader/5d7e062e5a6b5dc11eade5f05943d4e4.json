{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\David\\\\Desktop\\\\Git Hub\\\\CAD\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport firebase from \"./config/firebase\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport MainNavigator from \"./navigation/MainNavigator\";\nimport useLinking from \"./navigation/useLinking\";\nvar Stack = createStackNavigator();\nexport default function App(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      initialNavigationState = _React$useState4[0],\n      setInitialNavigationState = _React$useState4[1];\n\n  var containerRef = React.useRef();\n\n  var _useLinking = useLinking(containerRef),\n      getInitialState = _useLinking.getInitialState;\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              SplashScreen.preventAutoHide();\n              _context.t0 = setInitialNavigationState;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(getInitialState());\n\n            case 5:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({}, Ionicons.font, {\n                'space-mono': require(\"./assets/fonts/SpaceMono-Regular.ttf\")\n              })));\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t2 = _context[\"catch\"](0);\n              console.warn(_context.t2);\n\n            case 14:\n              _context.prev = 14;\n              setLoadingComplete(true);\n              SplashScreen.hide();\n              return _context.finish(14);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 11, 14, 18]], Promise);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return React.createElement(View, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, Platform.OS === 'ios' && React.createElement(StatusBar, {\n      barStyle: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 35\n      }\n    }), React.createElement(NavigationContainer, {\n      ref: containerRef,\n      initialState: initialNavigationState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, React.createElement(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, React.createElement(Stack.Screen, {\n      name: \"Root\",\n      component: MainNavigator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }))));\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n});","map":{"version":3,"sources":["C:/Users/David/Desktop/Git Hub/CAD/App.js"],"names":["React","firebase","SplashScreen","Font","Ionicons","NavigationContainer","createStackNavigator","MainNavigator","useLinking","Stack","App","props","useState","isLoadingComplete","setLoadingComplete","initialNavigationState","setInitialNavigationState","containerRef","useRef","getInitialState","useEffect","loadResourcesAndDataAsync","preventAutoHide","loadAsync","font","require","console","warn","hide","skipLoadingScreen","styles","container","Platform","OS","headerShown","StyleSheet","create","flex","backgroundColor"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP;;;;;AAEA,SAASC,YAAT,QAA6B,MAA7B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AAEA,OAAOC,aAAP;AACA,OAAOC,UAAP;AAEA,IAAMC,KAAK,GAAGH,oBAAoB,EAAlC;AAEA,eAAe,SAASI,GAAT,CAAaC,KAAb,EAAoB;AAAA,wBAEeX,KAAK,CAACY,QAAN,CAAe,KAAf,CAFf;AAAA;AAAA,MAE1BC,iBAF0B;AAAA,MAEPC,kBAFO;;AAAA,yBAG2Bd,KAAK,CAACY,QAAN,EAH3B;AAAA;AAAA,MAG1BG,sBAH0B;AAAA,MAGFC,yBAHE;;AAIjC,MAAMC,YAAY,GAAGjB,KAAK,CAACkB,MAAN,EAArB;;AAJiC,oBAKLV,UAAU,CAACS,YAAD,CALL;AAAA,MAKzBE,eALyB,eAKzBA,eALyB;;AAQjCnB,EAAAA,KAAK,CAACoB,SAAN,CAAgB,YAAM;AACpB,aAAeC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAEInB,cAAAA,YAAY,CAACoB,eAAb;AAFJ,4BAKIN,yBALJ;AAAA;AAAA,+CAKoCG,eAAe,EALnD;;AAAA;AAAA;AAAA;AAAA;AAAA,+CAQUhB,IAAI,CAACoB,SAAL,mBACDnB,QAAQ,CAACoB,IADR;AAEJ,8BAAcC,OAAO;AAFjB,iBARV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAeIC,cAAAA,OAAO,CAACC,IAAR;;AAfJ;AAAA;AAiBIb,cAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAZ,cAAAA,YAAY,CAAC0B,IAAb;AAlBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBAP,IAAAA,yBAAyB;AAC1B,GAxBD,EAwBG,EAxBH;;AA0BA,MAAI,CAACR,iBAAD,IAAsB,CAACF,KAAK,CAACkB,iBAAjC,EAAoD;AAClD,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyB,oBAAC,SAAD;AAAW,MAAA,QAAQ,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD5B,EAEE,oBAAC,mBAAD;AAAqB,MAAA,GAAG,EAAEhB,YAA1B;AAAwC,MAAA,YAAY,EAAEF,sBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD,CAAO,SAAP;AACE,MAAA,aAAa,EAAE;AACbmB,QAAAA,WAAW,EAAE;AADA,OADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,IAAI,EAAC,MAAnB;AAA0B,MAAA,SAAS,EAAE3B,aAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF,CAFF,CADF;AAcD;AACF;AAED,IAAMuB,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE;AAFR;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\r\nimport firebase from './config/firebase';\r\nimport { Platform, StatusBar, StyleSheet, View } from 'react-native';\r\nimport { SplashScreen } from 'expo';\r\nimport * as Font from 'expo-font';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\n\r\nimport MainNavigator from './navigation/MainNavigator';\r\nimport useLinking from './navigation/useLinking';\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nexport default function App(props) {\r\n\r\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\r\n  const [initialNavigationState, setInitialNavigationState] = React.useState();\r\n  const containerRef = React.useRef();\r\n  const { getInitialState } = useLinking(containerRef);\r\n\r\n  // Load any resources or data that we need prior to rendering the app\r\n  React.useEffect(() => {\r\n    async function loadResourcesAndDataAsync() {\r\n      try {\r\n        SplashScreen.preventAutoHide();\r\n\r\n        // Load our initial navigation state\r\n        setInitialNavigationState(await getInitialState());\r\n\r\n        // Load fonts\r\n        await Font.loadAsync({\r\n          ...Ionicons.font,\r\n          'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\r\n        });\r\n\r\n      } catch (e) {\r\n        // We might want to provide this error information to an error reporting service\r\n        console.warn(e);\r\n      } finally {\r\n        setLoadingComplete(true);\r\n        SplashScreen.hide();\r\n      }\r\n    }\r\n\r\n    loadResourcesAndDataAsync();\r\n  }, []);\r\n\r\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <View style={styles.container}>\r\n        {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\r\n        <NavigationContainer ref={containerRef} initialState={initialNavigationState}>\r\n          <Stack.Navigator\r\n            screenOptions={{\r\n              headerShown: false\r\n            }}\r\n          >\r\n            <Stack.Screen name=\"Root\" component={MainNavigator} />\r\n          </Stack.Navigator>\r\n        </NavigationContainer>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}