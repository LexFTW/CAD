{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CheckboxAndroid = exports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"./MaterialCommunityIcon\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"./TouchableRipple\"));\n\nvar _theming = require(\"../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/CheckboxAndroid.tsx\";\nvar ANIMATION_DURATION = 100;\n\nvar CheckboxAndroid = function (_React$Component) {\n  (0, _inherits2.default)(CheckboxAndroid, _React$Component);\n\n  function CheckboxAndroid() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, CheckboxAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(CheckboxAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"state\", {\n      scaleAnim: new _reactNative.Animated.Value(1)\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(CheckboxAndroid, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.status === this.props.status) {\n        return;\n      }\n\n      var checked = this.props.status === 'checked';\n      var animation = this.props.theme.animation;\n\n      _reactNative.Animated.sequence([_reactNative.Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * animation.scale : 0\n      }), _reactNative.Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked ? ANIMATION_DURATION * animation.scale : ANIMATION_DURATION * animation.scale * 1.75\n      })]).start();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          status = _this$props.status,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"status\", \"disabled\", \"onPress\", \"theme\"]);\n      var checked = status === 'checked';\n      var indeterminate = status === 'indeterminate';\n      var checkedColor = this.props.color || theme.colors.accent;\n      var uncheckedColor = this.props.uncheckedColor || (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n      var rippleColor, checkboxColor;\n\n      if (disabled) {\n        rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();\n        checkboxColor = theme.colors.disabled;\n      } else {\n        rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();\n        checkboxColor = checked ? checkedColor : uncheckedColor;\n      }\n\n      var borderWidth = this.state.scaleAnim.interpolate({\n        inputRange: [0.8, 1],\n        outputRange: [7, 0]\n      });\n      var icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';\n      return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: onPress,\n        disabled: disabled,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : [],\n        accessibilityLiveRegion: \"polite\",\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        }\n      }), React.createElement(_reactNative.Animated.View, {\n        style: {\n          transform: [{\n            scale: this.state.scaleAnim\n          }]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        }\n      }, React.createElement(_MaterialCommunityIcon.default, {\n        allowFontScaling: false,\n        name: icon,\n        size: 24,\n        color: checkboxColor,\n        direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        }\n      }), React.createElement(_reactNative.View, {\n        style: [_reactNative.StyleSheet.absoluteFill, styles.fillContainer],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        }\n      }, React.createElement(_reactNative.Animated.View, {\n        style: [styles.fill, {\n          borderColor: checkboxColor\n        }, {\n          borderWidth: borderWidth\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        }\n      }))));\n    }\n  }]);\n  return CheckboxAndroid;\n}(React.Component);\n\nexports.CheckboxAndroid = CheckboxAndroid;\n(0, _defineProperty2.default)(CheckboxAndroid, \"displayName\", 'Checkbox.Android');\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    height: 14,\n    width: 14\n  }\n});\n\nvar _default = (0, _theming.withTheme)(CheckboxAndroid);\n\nexports.default = _default;","map":{"version":3,"sources":["CheckboxAndroid.tsx"],"names":["ANIMATION_DURATION","CheckboxAndroid","React","Component","scaleAnim","Animated","prevProps","checked","animation","toValue","duration","status","disabled","onPress","theme","rest","indeterminate","checkedColor","uncheckedColor","rippleColor","checkboxColor","borderWidth","inputRange","outputRange","icon","styles","transform","scale","I18nManager","StyleSheet","borderColor","container","borderRadius","width","height","padding","fillContainer","alignItems","justifyContent","fill"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, I18nManager } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  scaleAnim: Animated.Value;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxAndroid extends React.Component<Props, State> {\n  static displayName = 'Checkbox.Android';\n\n  state = {\n    scaleAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    const checked = this.props.status === 'checked';\n    const { animation } = this.props.theme;\n\n    Animated.sequence([\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * animation.scale : 0,\n      }),\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * animation.scale\n          : ANIMATION_DURATION * animation.scale * 1.75,\n      }),\n    ]).start();\n  }\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor, checkboxColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n      checkboxColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n      checkboxColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    const borderWidth = this.state.scaleAnim.interpolate({\n      inputRange: [0.8, 1],\n      outputRange: [7, 0],\n    });\n\n    const icon = indeterminate\n      ? 'minus-box'\n      : checked\n      ? 'checkbox-marked'\n      : 'checkbox-blank-outline';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <Animated.View style={{ transform: [{ scale: this.state.scaleAnim }] }}>\n          <MaterialCommunityIcon\n            allowFontScaling={false}\n            name={icon}\n            size={24}\n            color={checkboxColor}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n          <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n            <Animated.View\n              style={[\n                styles.fill,\n                { borderColor: checkboxColor },\n                { borderWidth },\n              ]}\n            />\n          </View>\n        </Animated.View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nexport { CheckboxAndroid };\n"]},"metadata":{},"sourceType":"script"}