{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _InputLabel = _interopRequireDefault(require(\"./Label/InputLabel\"));\n\nvar _LabelBackground = _interopRequireDefault(require(\"./Label/LabelBackground\"));\n\nvar _constants = require(\"./constants\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/TextInput/TextInputOutlined.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\n\nvar TextInputOutlined = function (_React$Component) {\n  (0, _inherits2.default)(TextInputOutlined, _React$Component);\n\n  function TextInputOutlined() {\n    (0, _classCallCheck2.default)(this, TextInputOutlined);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TextInputOutlined).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(TextInputOutlined, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          editable = _this$props.editable,\n          label = _this$props.label,\n          error = _this$props.error,\n          selectionColor = _this$props.selectionColor,\n          underlineColor = _this$props.underlineColor,\n          dense = _this$props.dense,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          render = _this$props.render,\n          multiline = _this$props.multiline,\n          parentState = _this$props.parentState,\n          innerRef = _this$props.innerRef,\n          onFocus = _this$props.onFocus,\n          onBlur = _this$props.onBlur,\n          onChangeText = _this$props.onChangeText,\n          onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\"]);\n      var colors = theme.colors,\n          fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n\n      var _ref = _reactNative.StyleSheet.flatten(style) || {},\n          fontSizeStyle = _ref.fontSize,\n          fontWeight = _ref.fontWeight,\n          height = _ref.height,\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? colors.background : _ref$backgroundColor,\n          viewStyle = (0, _objectWithoutProperties2.default)(_ref, [\"fontSize\", \"fontWeight\", \"height\", \"backgroundColor\"]);\n\n      var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;\n      var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n      if (disabled) {\n        inputTextColor = activeColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = outlineColor = colors.disabled;\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : colors.primary;\n        placeholderColor = outlineColor = colors.placeholder;\n        errorColor = colors.error;\n      }\n\n      var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - _constants.MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n      var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n      var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);\n      var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, LABEL_PADDING_TOP);\n      if (height && typeof height !== 'number') console.warn('Currently we support only numbers in height prop');\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: LABEL_PADDING_TOP,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        label: label,\n        scale: fontScale,\n        isAndroid: _reactNative.Platform.OS === 'android',\n        styles: _reactNative.StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n      };\n      var pad = (0, _helpers.calculatePadding)(paddingSettings);\n      var paddingOut = (0, _helpers.adjustPaddingOut)(_objectSpread({}, paddingSettings, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = (0, _helpers.interpolatePlaceholder)(parentState.labeled, hasActiveOutline);\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        backgroundColor: backgroundColor,\n        errorColor: errorColor\n      };\n      var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      return React.createElement(_reactNative.View, {\n        style: viewStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        }\n      }, React.createElement(_reactNative.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        }\n      }, React.createElement(Outline, {\n        theme: theme,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        outlineColor: outlineColor,\n        backgroundColor: backgroundColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        }\n      }), React.createElement(_reactNative.View, {\n        style: {\n          paddingTop: LABEL_PADDING_TOP,\n          paddingBottom: 0,\n          minHeight: minHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        }\n      }, React.createElement(_InputLabel.default, {\n        parentState: parentState,\n        labelProps: labelProps,\n        labelBackground: _LabelBackground.default,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        }\n      }), render === null || render === void 0 ? void 0 : render(_objectSpread({}, rest, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, !multiline || multiline && height ? {\n          height: inputHeight\n        } : {}, paddingOut, _objectSpread({}, font, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center'\n        })]\n      })))));\n    }\n  }]);\n  return TextInputOutlined;\n}(React.Component);\n\n(0, _defineProperty2.default)(TextInputOutlined, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(_reactNative.TextInput, (0, _extends2.default)({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      }\n    }));\n  }\n});\nvar _default = TextInputOutlined;\nexports.default = _default;\n\nvar Outline = function Outline(_ref2) {\n  var theme = _ref2.theme,\n      hasActiveOutline = _ref2.hasActiveOutline,\n      activeColor = _ref2.activeColor,\n      outlineColor = _ref2.outlineColor,\n      backgroundColor = _ref2.backgroundColor;\n  return React.createElement(_reactNative.View, {\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: hasActiveOutline ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    }\n  });\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"sources":["TextInputOutlined.tsx"],"names":["OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","React","Component","disabled","error","multiline","editable","render","label","selectionColor","underlineColor","dense","style","theme","parentState","innerRef","onFocus","onBlur","onChangeText","onLayoutAnimatedText","rest","colors","fonts","font","hasActiveOutline","fontSizeStyle","fontWeight","height","backgroundColor","viewStyle","StyleSheet","fontSize","MAXIMIZED_LABEL_FONT_SIZE","inputTextColor","activeColor","placeholderColor","outlineColor","errorColor","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","minInputHeight","inputHeight","topPosition","console","paddingSettings","offset","scale","isAndroid","Platform","styles","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labelProps","placeholderStyle","wiggleOffsetX","LABEL_WIGGLE_X_OFFSET","minHeight","paddingTop","paddingBottom","LabelBackground","ref","placeholder","placeholderTextColor","underlineColorAndroid","color","textAlignVertical","Outline","borderRadius","borderWidth","borderColor","position","left","paddingHorizontal","outline","right","top","bottom","input","flexGrow","margin","textAlign","zIndex","inputOutlined","inputOutlinedDense"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport { RenderProps, ChildTextInputProps } from './types';\nimport { Theme } from '../../types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n} from './helpers';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps, {}> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      ...rest\n    } = this.props;\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      backgroundColor = colors.background,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = outlineColor = colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = outlineColor = colors.placeholder;\n      errorColor = colors.error;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      LABEL_PADDING_TOP\n    );\n\n    if (height && typeof height !== 'number')\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputOutlinedDense : styles.inputOutlined\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = interpolatePlaceholder(\n      parentState.labeled,\n      hasActiveOutline\n    );\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor,\n      errorColor,\n    };\n\n    const minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n\n    return (\n      <View style={viewStyle}>\n        {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n        <View>\n          <Outline\n            theme={theme}\n            hasActiveOutline={hasActiveOutline}\n            activeColor={activeColor}\n            outlineColor={outlineColor}\n            backgroundColor={backgroundColor}\n          />\n          <View\n            style={{\n              paddingTop: LABEL_PADDING_TOP,\n              paddingBottom: 0,\n              minHeight,\n            }}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n\n            {render?.({\n              ...rest,\n              ref: innerRef,\n              onChangeText,\n              placeholder: label\n                ? parentState.placeholder\n                : this.props.placeholder,\n              placeholderTextColor: placeholderColor,\n              editable: !disabled && editable,\n              selectionColor:\n                typeof selectionColor === 'undefined'\n                  ? activeColor\n                  : selectionColor,\n              onFocus,\n              onBlur,\n              underlineColorAndroid: 'transparent',\n              multiline,\n              style: [\n                styles.input,\n                !multiline || (multiline && height)\n                  ? { height: inputHeight }\n                  : {},\n                paddingOut,\n                {\n                  ...font,\n                  fontSize,\n                  fontWeight,\n                  color: inputTextColor,\n                  textAlignVertical: multiline ? 'top' : 'center',\n                },\n              ],\n            } as RenderProps)}\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\ntype OutlineType = {\n  activeColor: string;\n  hasActiveOutline: boolean | undefined;\n  outlineColor: string | undefined;\n  backgroundColor: string | undefined;\n  theme: Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  backgroundColor,\n}: OutlineType) => (\n  <View\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: hasActiveOutline ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}