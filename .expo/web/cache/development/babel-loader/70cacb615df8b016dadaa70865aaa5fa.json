{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _shadow = _interopRequireDefault(require(\"../styles/shadow\"));\n\nvar _theming = require(\"../core/theming\");\n\nvar _overlay = _interopRequireDefault(require(\"../styles/overlay\"));\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Surface.tsx\";\n\nvar Surface = function (_React$Component) {\n  (0, _inherits2.default)(Surface, _React$Component);\n\n  function Surface() {\n    (0, _classCallCheck2.default)(this, Surface);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Surface).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(Surface, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"style\", \"theme\"]);\n      var flattenedStyles = _reactNative.StyleSheet.flatten(style) || {};\n      var _flattenedStyles$elev = flattenedStyles.elevation,\n          elevation = _flattenedStyles$elev === void 0 ? 4 : _flattenedStyles$elev;\n      var isDarkTheme = theme.dark,\n          mode = theme.mode,\n          colors = theme.colors;\n      return React.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, rest, {\n        style: [{\n          backgroundColor: isDarkTheme && mode === 'adaptive' ? (0, _overlay.default)(elevation, colors.surface) : colors.surface\n        }, elevation && (0, _shadow.default)(elevation), style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        }\n      }));\n    }\n  }]);\n  return Surface;\n}(React.Component);\n\nvar _default = (0, _theming.withTheme)(Surface);\n\nexports.default = _default;","map":{"version":3,"sources":["Surface.tsx"],"names":["Surface","React","Component","style","theme","rest","flattenedStyles","StyleSheet","elevation","isDarkTheme","mode","colors","backgroundColor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAEA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,oBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,mBAAA;;AAEA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,qBAAA,CAAA;;;;AAyDMA,IAAAA,O;;;;;;;;;;6BACK;AAAA,UAAA,WAAA,GAC2B,KAD3B,KAAA;AAAA,UACCG,KADD,GAAA,WAAA,CAAA,KAAA;AAAA,UACQC,KADR,GAAA,WAAA,CAAA,KAAA;AAAA,UACkBC,IADlB,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,WAAA,EAAA,CAAA,OAAA,EAAA,OAAA,CAAA,CAAA;AAEP,UAAMC,eAAe,GAAGC,YAAAA,CAAAA,UAAAA,CAAAA,OAAAA,CAAAA,KAAAA,KAAxB,EAAA;AAFO,UAAA,qBAAA,GAG8BD,eAH9B,CAAA,SAAA;AAAA,UAGCE,SAHD,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,qBAAA;AAAA,UAIOC,WAJP,GAIqCL,KAJrC,CAAA,IAAA;AAAA,UAIoBM,IAJpB,GAIqCN,KAJrC,CAAA,IAAA;AAAA,UAI0BO,MAJ1B,GAIqCP,KAJrC,CAAA,MAAA;AAKP,aACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,QAAC,CAAD,IAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,IAAA,EAAA;AAEE,QAAA,KAAK,EAAE,CACL;AACEQ,UAAAA,eAAe,EACbH,WAAW,IAAIC,IAAI,KAAnBD,UAAAA,GACI,CAAA,GAAA,QAAA,CAAA,OAAA,EAAA,SAAA,EAAmBE,MAAM,CAD7BF,OACI,CADJA,GAEIE,MAAM,CALT;AACL,SADK,EAOLH,SAAS,IAAI,CAAA,GAAA,OAAA,CAAA,OAAA,EAPR,SAOQ,CAPR,EAFT,KAES,CAFT;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EADF;AACE;AAAA,OAAA,CAAA,CADF;;;;EANkBP,KAAK,CAACC,S,CAAtBF;;eAuBS,CAAA,GAAA,QAAA,CAAA,SAAA,EAAA,OAAA,C","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport shadow from '../styles/shadow';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\nimport overlay from '../styles/overlay';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `Surface`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Surface is a basic container that can give depth to an element with elevation shadow.\n * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations.\n * Overlay and/or shadow can be applied by specifying the `elevation` property both on Android and iOS.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-1.png\" />\n *   <img src=\"screenshots/surface-2.png\" />\n *   <img src=\"screenshots/surface-3.png\" />\n * </div>\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-dark-1.png\" />\n *   <img src=\"screenshots/surface-dark-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Surface, Text } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *   <Surface style={styles.surface}>\n *      <Text>Surface</Text>\n *   </Surface>\n * );\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   surface: {\n *     padding: 8,\n *     height: 80,\n *     width: 80,\n *     alignItems: 'center',\n *     justifyContent: 'center',\n *     elevation: 4,\n *   },\n * });\n * ```\n */\nclass Surface extends React.Component<Props> {\n  render() {\n    const { style, theme, ...rest } = this.props;\n    const flattenedStyles = StyleSheet.flatten(style) || {};\n    const { elevation = 4 }: ViewStyle = flattenedStyles;\n    const { dark: isDarkTheme, mode, colors } = theme;\n    return (\n      <Animated.View\n        {...rest}\n        style={[\n          {\n            backgroundColor:\n              isDarkTheme && mode === 'adaptive'\n                ? overlay(elevation, colors.surface)\n                : colors.surface,\n          },\n          elevation && shadow(elevation),\n          style,\n        ]}\n      />\n    );\n  }\n}\nexport default withTheme(Surface);\n"]},"metadata":{},"sourceType":"script"}