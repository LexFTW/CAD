{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"./TouchableRipple\"));\n\nvar _Icon = _interopRequireDefault(require(\"./Icon\"));\n\nvar _CrossFadeIcon = _interopRequireDefault(require(\"./CrossFadeIcon\"));\n\nvar _theming = require(\"../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/IconButton.tsx\";\n\nvar IconButton = function IconButton(_ref) {\n  var icon = _ref.icon,\n      customColor = _ref.color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      _ref$animated = _ref.animated,\n      animated = _ref$animated === void 0 ? false : _ref$animated,\n      theme = _ref.theme,\n      style = _ref.style,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"icon\", \"color\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"animated\", \"theme\", \"style\"]);\n  var iconColor = typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  var rippleColor = (0, _color.default)(iconColor).alpha(0.32).rgb().string();\n  var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;\n  var buttonSize = size * 1.5;\n  return React.createElement(_TouchableRipple.default, (0, _extends2.default)({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    style: [styles.container, {\n      width: buttonSize,\n      height: buttonSize,\n      borderRadius: buttonSize / 2\n    }, disabled && styles.disabled, style],\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityStates: disabled ? ['disabled'] : [],\n    disabled: disabled,\n    hitSlop: _TouchableRipple.default.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    }\n  }), React.createElement(_reactNative.View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    }\n  }, React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    }\n  })));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\n\nvar _default = (0, _theming.withTheme)(IconButton);\n\nexports.default = _default;","map":{"version":3,"sources":["IconButton.tsx"],"names":["IconButton","icon","color","customColor","size","accessibilityLabel","disabled","onPress","animated","theme","style","rest","iconColor","rippleColor","IconComponent","CrossFadeIcon","Icon","buttonSize","styles","width","height","borderRadius","TouchableRipple","top","left","bottom","right","StyleSheet","container","alignItems","justifyContent","overflow","margin","opacity"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor)\n    .alpha(0.32)\n    .rgb()\n    .string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityStates={disabled ? ['disabled'] : []}\n      disabled={disabled}\n      hitSlop={\n        // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]},"metadata":{},"sourceType":"script"}