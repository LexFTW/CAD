{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppbarContent = exports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _colors = require(\"../../styles/colors\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Appbar/AppbarContent.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar AppbarContent = function (_React$Component) {\n  (0, _inherits2.default)(AppbarContent, _React$Component);\n\n  function AppbarContent() {\n    (0, _classCallCheck2.default)(this, AppbarContent);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AppbarContent).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(AppbarContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          _this$props$color = _this$props.color,\n          titleColor = _this$props$color === void 0 ? _colors.white : _this$props$color,\n          subtitle = _this$props.subtitle,\n          subtitleStyle = _this$props.subtitleStyle,\n          onPress = _this$props.onPress,\n          style = _this$props.style,\n          titleRef = _this$props.titleRef,\n          titleStyle = _this$props.titleStyle,\n          theme = _this$props.theme,\n          title = _this$props.title,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"color\", \"subtitle\", \"subtitleStyle\", \"onPress\", \"style\", \"titleRef\", \"titleStyle\", \"theme\", \"title\"]);\n      var fonts = theme.fonts;\n      var subtitleColor = (0, _color.default)(titleColor).alpha(0.7).rgb().string();\n      return React.createElement(_reactNative.TouchableWithoutFeedback, {\n        onPress: onPress,\n        disabled: !onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        }\n      }, React.createElement(_reactNative.View, (0, _extends2.default)({\n        style: [styles.container, style]\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        }\n      }), React.createElement(_Text.default, {\n        ref: titleRef,\n        style: [_objectSpread({\n          color: titleColor\n        }, _reactNative.Platform.OS === 'ios' ? fonts.regular : fonts.medium), styles.title, titleStyle],\n        numberOfLines: 1,\n        accessible: true,\n        accessibilityTraits: \"header\",\n        accessibilityRole: _reactNative.Platform.OS === 'web' ? 'heading' : 'header',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        }\n      }, title), subtitle ? React.createElement(_Text.default, {\n        style: [styles.subtitle, {\n          color: subtitleColor\n        }, subtitleStyle],\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        }\n      }, subtitle) : null));\n    }\n  }]);\n  return AppbarContent;\n}(React.Component);\n\nexports.AppbarContent = AppbarContent;\n(0, _defineProperty2.default)(AppbarContent, \"displayName\", 'Appbar.Content');\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12\n  },\n  title: {\n    fontSize: _reactNative.Platform.OS === 'ios' ? 17 : 20\n  },\n  subtitle: {\n    fontSize: _reactNative.Platform.OS === 'ios' ? 11 : 14\n  }\n});\n\nvar _default = (0, _theming.withTheme)(AppbarContent);\n\nexports.default = _default;","map":{"version":3,"sources":["AppbarContent.tsx"],"names":["AppbarContent","React","Component","titleColor","white","subtitle","subtitleStyle","onPress","style","titleRef","titleStyle","theme","title","rest","fonts","subtitleColor","styles","color","Platform","StyleSheet","container","flex","paddingHorizontal","fontSize"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport Text from '../Typography/Text';\n\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\n\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Text for the title.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Reference for the title.\n   */\n  titleRef?: React.RefObject<Text>;\n  /**\n   * Text for the subtitle.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A component used to display a title and optional subtitle in a appbar.\n */\nclass AppbarContent extends React.Component<Props> {\n  static displayName = 'Appbar.Content';\n\n  render() {\n    const {\n      color: titleColor = white,\n      subtitle,\n      subtitleStyle,\n      onPress,\n      style,\n      titleRef,\n      titleStyle,\n      theme,\n      title,\n      ...rest\n    } = this.props;\n    const { fonts } = theme;\n\n    const subtitleColor = color(titleColor)\n      .alpha(0.7)\n      .rgb()\n      .string();\n\n    return (\n      <TouchableWithoutFeedback onPress={onPress} disabled={!onPress}>\n        <View style={[styles.container, style]} {...rest}>\n          <Text\n            ref={titleRef}\n            style={[\n              {\n                color: titleColor,\n                ...(Platform.OS === 'ios' ? fonts.regular : fonts.medium),\n              },\n              styles.title,\n              titleStyle,\n            ]}\n            numberOfLines={1}\n            accessible\n            accessibilityTraits=\"header\"\n            // @ts-ignore\n            accessibilityRole={Platform.OS === 'web' ? 'heading' : 'header'}\n          >\n            {title}\n          </Text>\n          {subtitle ? (\n            <Text\n              style={[styles.subtitle, { color: subtitleColor }, subtitleStyle]}\n              numberOfLines={1}\n            >\n              {subtitle}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12,\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20,\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14,\n  },\n});\n\nexport default withTheme(AppbarContent);\n\n// @component-docs ignore-next-line\nexport { AppbarContent };\n"]},"metadata":{},"sourceType":"script"}