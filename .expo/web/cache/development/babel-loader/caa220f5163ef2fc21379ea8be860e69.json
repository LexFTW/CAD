{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _theming = require(\"../core/theming\");\n\nvar _colors = require(\"../styles/colors\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Divider.tsx\";\n\nvar Divider = function (_React$Component) {\n  (0, _inherits2.default)(Divider, _React$Component);\n\n  function Divider() {\n    (0, _classCallCheck2.default)(this, Divider);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Divider).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(Divider, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          inset = _this$props.inset,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"inset\", \"style\", \"theme\"]);\n      var isDarkTheme = theme.dark;\n      return React.createElement(_reactNative.View, (0, _extends2.default)({}, rest, {\n        style: [isDarkTheme ? styles.dark : styles.light, inset && styles.inset, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        }\n      }));\n    }\n  }]);\n  return Divider;\n}(React.Component);\n\nvar styles = _reactNative.StyleSheet.create({\n  light: {\n    backgroundColor: (0, _color.default)(_colors.black).alpha(0.12).rgb().string(),\n    height: _reactNative.StyleSheet.hairlineWidth\n  },\n  dark: {\n    backgroundColor: (0, _color.default)(_colors.white).alpha(0.12).rgb().string(),\n    height: _reactNative.StyleSheet.hairlineWidth\n  },\n  inset: {\n    marginLeft: 72\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Divider);\n\nexports.default = _default;","map":{"version":3,"sources":["Divider.tsx"],"names":["Divider","React","Component","inset","style","theme","rest","isDarkTheme","styles","StyleSheet","light","backgroundColor","black","height","dark","white","marginLeft"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAEA,IAAA,QAAA,GAAA,OAAA,mBAAA;;AACA,IAAA,OAAA,GAAA,OAAA,oBAAA;;;;AAoCMA,IAAAA,O;;;;;;;;;;6BACK;AAAA,UAAA,WAAA,GACkC,KADlC,KAAA;AAAA,UACCG,KADD,GAAA,WAAA,CAAA,KAAA;AAAA,UACQC,KADR,GAAA,WAAA,CAAA,KAAA;AAAA,UACeC,KADf,GAAA,WAAA,CAAA,KAAA;AAAA,UACyBC,IADzB,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,WAAA,EAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA,CAAA,CAAA;AAAA,UAEOC,WAFP,GAEuBF,KAFvB,CAAA,IAAA;AAGP,aACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,IAAA,EAAA;AAEE,QAAA,KAAK,EAAE,CACLE,WAAW,GAAGC,MAAM,CAAT,IAAA,GAAiBA,MAAM,CAD7B,KAAA,EAELL,KAAK,IAAIK,MAAM,CAFV,KAAA,EAFT,KAES,CAFT;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EADF;AACE;AAAA,OAAA,CAAA,CADF;;;;EAJkBP,KAAK,CAACC,S,CAAtBF;;AAiBN,IAAMQ,MAAM,GAAGC,YAAAA,CAAAA,UAAAA,CAAAA,MAAAA,CAAkB;AAC/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,eAAe,EAAE,CAAA,GAAA,MAAA,CAAA,OAAA,EAAMC,OAAAA,CAAN,KAAA,EAAA,KAAA,CAAA,IAAA,EAAA,GAAA,GADZ,MACY,EADZ;AAKLC,IAAAA,MAAM,EAAEJ,YAAAA,CAAAA,UAAAA,CANqB;AACxB,GADwB;AAQ/BK,EAAAA,IAAI,EAAE;AACJH,IAAAA,eAAe,EAAE,CAAA,GAAA,MAAA,CAAA,OAAA,EAAMI,OAAAA,CAAN,KAAA,EAAA,KAAA,CAAA,IAAA,EAAA,GAAA,GADb,MACa,EADb;AAKJF,IAAAA,MAAM,EAAEJ,YAAAA,CAAAA,UAAAA,CAbqB;AAQzB,GARyB;AAe/BN,EAAAA,KAAK,EAAE;AACLa,IAAAA,UAAU,EAhBd;AAeS;AAfwB,CAAlBP,CAAf;;eAoBe,CAAA,GAAA,QAAA,CAAA,SAAA,EAAA,OAAA,C","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   *  Whether divider has a left inset.\n   */\n  inset?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Apple</Text>\n *     <Divider />\n *     <Text>Orange</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Divider extends React.Component<Props> {\n  render() {\n    const { inset, style, theme, ...rest } = this.props;\n    const { dark: isDarkTheme } = theme;\n    return (\n      <View\n        {...rest}\n        style={[\n          isDarkTheme ? styles.dark : styles.light,\n          inset && styles.inset,\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  dark: {\n    backgroundColor: color(white)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  inset: {\n    marginLeft: 72,\n  },\n});\n\nexport default withTheme(Divider);\n"]},"metadata":{},"sourceType":"script"}