{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RadioButtonAndroid = exports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _RadioButtonGroup = require(\"./RadioButtonGroup\");\n\nvar _utils = require(\"./utils\");\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/RadioButton/RadioButtonAndroid.tsx\";\nvar BORDER_WIDTH = 2;\n\nvar RadioButtonAndroid = function (_React$Component) {\n  (0, _inherits2.default)(RadioButtonAndroid, _React$Component);\n\n  function RadioButtonAndroid() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, RadioButtonAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(RadioButtonAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"state\", {\n      borderAnim: new _reactNative.Animated.Value(BORDER_WIDTH),\n      radioAnim: new _reactNative.Animated.Value(1)\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(RadioButtonAndroid, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.status === this.props.status) {\n        return;\n      }\n\n      var scale = this.props.theme.animation.scale;\n\n      if (this.props.status === 'checked') {\n        this.state.radioAnim.setValue(1.2);\n\n        _reactNative.Animated.timing(this.state.radioAnim, {\n          toValue: 1,\n          duration: 150 * scale\n        }).start();\n      } else {\n        this.state.borderAnim.setValue(10);\n\n        _reactNative.Animated.timing(this.state.borderAnim, {\n          toValue: BORDER_WIDTH,\n          duration: 150 * scale\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          value = _this$props.value,\n          status = _this$props.status,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"disabled\", \"onPress\", \"theme\", \"value\", \"status\"]);\n      var checkedColor = this.props.color || theme.colors.accent;\n      var uncheckedColor = this.props.uncheckedColor || (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n      var rippleColor, radioColor;\n      return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        }\n      }, function (context) {\n        var checked = (0, _utils.isChecked)({\n          contextValue: context === null || context === void 0 ? void 0 : context.value,\n          status: status,\n          value: value\n        }) === 'checked';\n\n        if (disabled) {\n          rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {\n          borderless: true,\n          rippleColor: rippleColor,\n          onPress: disabled ? undefined : function () {\n            (0, _utils.handlePress)({\n              onPress: onPress,\n              onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n              value: value\n            });\n          },\n          accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n          accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n          accessibilityRole: \"button\",\n          accessibilityStates: disabled ? ['disabled'] : [],\n          accessibilityLiveRegion: \"polite\",\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          }\n        }), React.createElement(_reactNative.Animated.View, {\n          style: [styles.radio, {\n            borderColor: radioColor,\n            borderWidth: _this2.state.borderAnim\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          }\n        }, checked ? React.createElement(_reactNative.View, {\n          style: [_reactNative.StyleSheet.absoluteFill, styles.radioContainer],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          }\n        }, React.createElement(_reactNative.Animated.View, {\n          style: [styles.dot, {\n            backgroundColor: radioColor,\n            transform: [{\n              scale: _this2.state.radioAnim\n            }]\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          }\n        })) : null));\n      });\n    }\n  }]);\n  return RadioButtonAndroid;\n}(React.Component);\n\nexports.RadioButtonAndroid = RadioButtonAndroid;\n(0, _defineProperty2.default)(RadioButtonAndroid, \"displayName\", 'RadioButton.Android');\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\n\nvar _default = (0, _theming.withTheme)(RadioButtonAndroid);\n\nexports.default = _default;","map":{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["BORDER_WIDTH","RadioButtonAndroid","React","Component","borderAnim","Animated","radioAnim","prevProps","scale","toValue","duration","disabled","onPress","theme","value","status","rest","checkedColor","uncheckedColor","checked","contextValue","context","rippleColor","radioColor","onValueChange","styles","borderColor","borderWidth","StyleSheet","backgroundColor","transform","container","borderRadius","radioContainer","alignItems","justifyContent","radio","height","width","margin","dot"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  borderAnim: Animated.Value;\n  radioAnim: Animated.Value;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonAndroid extends React.Component<Props, State> {\n  static displayName = 'RadioButton.Android';\n\n  state = {\n    borderAnim: new Animated.Value(BORDER_WIDTH),\n    radioAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n    const { scale } = this.props.theme.animation;\n    if (this.props.status === 'checked') {\n      this.state.radioAnim.setValue(1.2);\n\n      Animated.timing(this.state.radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n      }).start();\n    } else {\n      this.state.borderAnim.setValue(10);\n\n      Animated.timing(this.state.borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n      }).start();\n    }\n  }\n\n  render() {\n    const { disabled, onPress, theme, value, status, ...rest } = this.props;\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor: string, radioColor: string;\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          const checked =\n            isChecked({\n              contextValue: context?.value,\n              status,\n              value,\n            }) === 'checked';\n\n          if (disabled) {\n            rippleColor = color(theme.colors.text)\n              .alpha(0.16)\n              .rgb()\n              .string();\n            radioColor = theme.colors.disabled;\n          } else {\n            rippleColor = color(checkedColor)\n              .fade(0.32)\n              .rgb()\n              .string();\n            radioColor = checked ? checkedColor : uncheckedColor;\n          }\n\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      handlePress({\n                        onPress,\n                        onValueChange: context?.onValueChange,\n                        value,\n                      });\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityStates={disabled ? ['disabled'] : []}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <Animated.View\n                style={[\n                  styles.radio,\n                  {\n                    borderColor: radioColor,\n                    borderWidth: this.state.borderAnim,\n                  },\n                ]}\n              >\n                {checked ? (\n                  <View\n                    style={[StyleSheet.absoluteFill, styles.radioContainer]}\n                  >\n                    <Animated.View\n                      style={[\n                        styles.dot,\n                        {\n                          backgroundColor: radioColor,\n                          transform: [{ scale: this.state.radioAnim }],\n                        },\n                      ]}\n                    />\n                  </View>\n                ) : null}\n              </Animated.View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nexport { RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"script"}