{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _Icon = _interopRequireDefault(require(\"./Icon\"));\n\nvar _Surface = _interopRequireDefault(require(\"./Surface\"));\n\nvar _Text = _interopRequireDefault(require(\"./Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"./TouchableRipple\"));\n\nvar _theming = require(\"../core/theming\");\n\nvar _colors = require(\"../styles/colors\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Chip.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar Chip = function (_React$Component) {\n  (0, _inherits2.default)(Chip, _React$Component);\n\n  function Chip() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Chip);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Chip)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"state\", {\n      elevation: new _reactNative.Animated.Value(0)\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handlePressIn\", function () {\n      var scale = _this.props.theme.animation.scale;\n\n      _reactNative.Animated.timing(_this.state.elevation, {\n        toValue: 4,\n        duration: 200 * scale,\n        useNativeDriver: false\n      }).start();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handlePressOut\", function () {\n      var scale = _this.props.theme.animation.scale;\n\n      _reactNative.Animated.timing(_this.state.elevation, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(Chip, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          children = _this$props.children,\n          icon = _this$props.icon,\n          avatar = _this$props.avatar,\n          selected = _this$props.selected,\n          disabled = _this$props.disabled,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          onPress = _this$props.onPress,\n          onLongPress = _this$props.onLongPress,\n          onClose = _this$props.onClose,\n          textStyle = _this$props.textStyle,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          testID = _this$props.testID,\n          selectedColor = _this$props.selectedColor,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"onPress\", \"onLongPress\", \"onClose\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\"]);\n      var dark = theme.dark,\n          colors = theme.colors;\n\n      var _ref = _reactNative.StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb' : _ref$backgroundColor,\n          _ref$borderRadius = _ref.borderRadius,\n          borderRadius = _ref$borderRadius === void 0 ? 16 : _ref$borderRadius;\n\n      var borderColor = mode === 'outlined' ? (0, _color.default)(selectedColor !== undefined ? selectedColor : (0, _color.default)(dark ? _colors.white : _colors.black)).alpha(0.29).rgb().string() : backgroundColor;\n      var textColor = disabled ? colors.disabled : (0, _color.default)(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.87).rgb().string();\n      var iconColor = disabled ? colors.disabled : (0, _color.default)(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.54).rgb().string();\n      var selectedBackgroundColor = (dark ? (0, _color.default)(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4) : (0, _color.default)(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)).rgb().string();\n      var underlayColor = selectedColor ? (0, _color.default)(selectedColor).fade(0.5).rgb().string() : selectedBackgroundColor;\n      var accessibilityTraits = ['button'];\n      var accessibilityStates = [];\n\n      if (selected) {\n        accessibilityTraits.push('selected');\n        accessibilityStates.push('selected');\n      }\n\n      if (disabled) {\n        accessibilityTraits.push('disabled');\n        accessibilityStates.push('disabled');\n      }\n\n      return React.createElement(_Surface.default, (0, _extends2.default)({\n        style: [styles.container, {\n          elevation: _reactNative.Platform.OS === 'android' ? this.state.elevation : 0,\n          backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n          borderColor: borderColor,\n          borderRadius: borderRadius\n        }, style]\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        }\n      }), React.createElement(_TouchableRipple.default, {\n        borderless: true,\n        delayPressIn: 0,\n        style: {\n          borderRadius: borderRadius\n        },\n        onPress: onPress,\n        onLongPress: onLongPress,\n        onPressIn: this.handlePressIn,\n        onPressOut: this.handlePressOut,\n        underlayColor: underlayColor,\n        disabled: disabled,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: accessibilityTraits,\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: accessibilityStates,\n        testID: testID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        }\n      }, React.createElement(_reactNative.View, {\n        style: styles.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        }\n      }, avatar && !icon ? React.createElement(_reactNative.View, {\n        style: [styles.avatarWrapper, disabled && {\n          opacity: 0.26\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        }\n      }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n        style: [styles.avatar, avatar.props.style]\n      }) : avatar) : null, icon || selected ? React.createElement(_reactNative.View, {\n        style: [styles.icon, avatar ? [styles.avatar, styles.avatarSelected] : null],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        }\n      }, React.createElement(_Icon.default, {\n        source: icon || 'check',\n        color: avatar ? _colors.white : iconColor,\n        size: 18,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        }\n      })) : null, React.createElement(_Text.default, {\n        numberOfLines: 1,\n        style: [styles.text, _objectSpread({}, theme.fonts.regular, {\n          color: textColor,\n          marginRight: onClose ? 4 : 8,\n          marginLeft: avatar || icon || selected ? 4 : 8\n        }), textStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        }\n      }, children), onClose ? React.createElement(_reactNative.TouchableWithoutFeedback, {\n        onPress: onClose,\n        accessibilityTraits: \"button\",\n        accessibilityComponentType: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        }\n      }, React.createElement(_reactNative.View, {\n        style: styles.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        }\n      }, React.createElement(_Icon.default, {\n        source: \"close-circle\",\n        size: 16,\n        color: iconColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        }\n      }))) : null)));\n    }\n  }]);\n  return Chip;\n}(React.Component);\n\n(0, _defineProperty2.default)(Chip, \"defaultProps\", {\n  mode: 'flat',\n  disabled: false,\n  selected: false\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderWidth: _reactNative.StyleSheet.hairlineWidth,\n    borderStyle: 'solid'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4\n  },\n  icon: {\n    padding: 4\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Chip);\n\nexports.default = _default;","map":{"version":3,"sources":["Chip.tsx"],"names":["Chip","React","Component","mode","disabled","selected","elevation","Animated","scale","toValue","duration","useNativeDriver","children","icon","avatar","accessibilityLabel","onPress","onLongPress","onClose","textStyle","style","theme","testID","selectedColor","rest","dark","colors","backgroundColor","borderRadius","StyleSheet","borderColor","white","black","textColor","iconColor","selectedBackgroundColor","underlayColor","accessibilityTraits","accessibilityStates","styles","Platform","opacity","color","marginRight","marginLeft","container","borderWidth","borderStyle","content","flexDirection","alignItems","paddingHorizontal","padding","text","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","avatarWrapper","avatarSelected","position","top","left"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  AccessibilityTrait,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport { Theme } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: any;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Chip extends React.Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    mode: 'flat',\n    disabled: false,\n    selected: false,\n  };\n\n  state = {\n    elevation: new Animated.Value(0),\n  };\n\n  private handlePressIn = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  private handlePressOut = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  render() {\n    const {\n      mode,\n      children,\n      icon,\n      avatar,\n      selected,\n      disabled,\n      accessibilityLabel,\n      onPress,\n      onLongPress,\n      onClose,\n      textStyle,\n      style,\n      theme,\n      testID,\n      selectedColor,\n      ...rest\n    } = this.props;\n    const { dark, colors } = theme;\n\n    const {\n      backgroundColor = mode === 'outlined'\n        ? colors.surface\n        : dark\n        ? '#383838'\n        : '#ebebeb',\n      borderRadius = 16,\n    } = StyleSheet.flatten(style) || {};\n\n    const borderColor =\n      mode === 'outlined'\n        ? color(\n            selectedColor !== undefined\n              ? selectedColor\n              : color(dark ? white : black)\n          )\n            .alpha(0.29)\n            .rgb()\n            .string()\n        : backgroundColor;\n    const textColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n    const iconColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n    const selectedBackgroundColor = (dark\n      ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4)\n      : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)\n    )\n      .rgb()\n      .string();\n\n    const underlayColor = selectedColor\n      ? color(selectedColor)\n          .fade(0.5)\n          .rgb()\n          .string()\n      : selectedBackgroundColor;\n\n    const accessibilityTraits: AccessibilityTrait[] = ['button'];\n    const accessibilityStates: AccessibilityState[] = [];\n\n    if (selected) {\n      accessibilityTraits.push('selected');\n      accessibilityStates.push('selected');\n    }\n\n    if (disabled) {\n      accessibilityTraits.push('disabled');\n      accessibilityStates.push('disabled');\n    }\n\n    return (\n      <Surface\n        style={\n          [\n            styles.container,\n            {\n              elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n              backgroundColor: selected\n                ? selectedBackgroundColor\n                : backgroundColor,\n              borderColor,\n              borderRadius,\n            },\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...rest}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          style={{ borderRadius }}\n          onPress={onPress}\n          onLongPress={onLongPress}\n          onPressIn={this.handlePressIn}\n          onPressOut={this.handlePressOut}\n          underlayColor={underlayColor}\n          disabled={disabled}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={accessibilityTraits}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={accessibilityStates}\n          testID={testID}\n        >\n          <View style={styles.content}>\n            {avatar && !icon ? (\n              <View\n                style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}\n              >\n                {React.isValidElement(avatar)\n                  ? /* $FlowFixMe */\n                    React.cloneElement(avatar, {\n                      /* $FlowFixMe */\n                      style: [styles.avatar, avatar.props.style],\n                    })\n                  : avatar}\n              </View>\n            ) : null}\n            {icon || selected ? (\n              <View\n                style={[\n                  styles.icon,\n                  avatar ? [styles.avatar, styles.avatarSelected] : null,\n                ]}\n              >\n                <Icon\n                  source={icon || 'check'}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              </View>\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.text,\n                {\n                  ...theme.fonts.regular,\n                  color: textColor,\n                  marginRight: onClose ? 4 : 8,\n                  marginLeft: avatar || icon || selected ? 4 : 8,\n                },\n                textStyle,\n              ]}\n            >\n              {children}\n            </Text>\n            {onClose ? (\n              <TouchableWithoutFeedback\n                onPress={onClose}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n              >\n                <View style={styles.icon}>\n                  <Icon source=\"close-circle\" size={16} color={iconColor} />\n                </View>\n              </TouchableWithoutFeedback>\n            ) : null}\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n  },\n  icon: {\n    padding: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n});\n\nexport default withTheme(Chip);\n"]},"metadata":{},"sourceType":"script"}